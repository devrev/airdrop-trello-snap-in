{% include "devrev-snapin-template.plain" %}

#  The Trello Snap-In

***Definitions:***

- The Snap-In interacts with Trello API (The API).

- The Organization is Trello organization.

- The Data Model of The API is as follows:
    ```
    The Data Model
    ├─ The List of Users
    │  └─ The User
    │     └─ The Permissions
    └─ The List of Boards
       └─ The Board
          └─ The List of Cards
             └─ The Card
                ├─ The List of Checklists
                │  └─ The Checklist
                ├─ The List of Comments
                │  └─ The Comment
                └─ The List of Attachments
                   └─ The Attachment
    ```

- The Fetched Boards are The List of Boards that are fetched from The API.

- The Fetched Users are The List of Users that are fetched from The API.

- The Fetched Cards are The List of Cards that are fetched from The API.

- The Fetched Attachments are The List of Attachments that are fetched from The API. One card from The Fetched Cards can have multiple attachments.

***Non-Functional Requirements:***

- The Trello Internal Client is a TypeScript service that communicates with The API. These are the rules for The Trello Internal Client:
  - If we need to create a new request to The API, we must create a new method in The Trello Internal Client.
  - Communication with The API must be completely abstracted away from The Function. The Function must be able to initialize The Trello Internal Client, call the relevant method from The Trello Internal Client and get the response from The API.

- The Trello API Key and The Trello OAuth Token are provided in `event["payload"]["connection_data"]["key"]`. Field `event["payload"]["connection_data"]["key"]` has the following format: "key=<The Trello API Key>&token=<The Trello OAuth Token>".

- Managing (overriding) environment variables in The Conformance Tests cannot be done and need not be tested.

***Test Requirements:***

- Credentials should be read from the environment. The following environment variables are required: `TRELLO_API_KEY` (The Trello API Key), `TRELLO_TOKEN` (The Trello OAuth Token), `TRELLO_ORGANIZATION_ID` (The Organization ID).

- When generating The Acceptance Test with The Attached JSON Of The Acceptance Test, The Conformance Tests *MUST*:
  - Replace `TRELLO_API_KEY` placeholder in The Attached JSON Of The Acceptance Test with actual The Trello API Key.
  - Replace `TRELLO_TOKEN` placeholder in The Attached JSON Of The Acceptance Test with actual The Trello OAuth Token.
  - Replace `TRELLO_ORGANIZATION_ID` placeholder in The Attached JSON Of The Acceptance Test with actual The Organization ID.

- "external_sync_unit_id" "688725dad59c015ce052eecf" can be used when board ID is required for testing purposes.

- Card ID "688725db990240b77167efef" can be used when card ID is required for testing attachments.

## Data Fetching

***Definitions:***

- The Functions implemented *MUST* also return:
  - `status_code` - a status code from The API.
  - `api_delay` - Delay in seconds to wait before retrying the request to The API. If we hit a rate limit, this should be more than 0. If we don't hit a rate limit, just set to 0. How to calculate api_delay:
    - Read the "Retry-After" header from the response (HTTP date object).
    - If there's no "Retry-After" header, set api_delay to 5.
  - `message` - Information about the call the The Function.
  - Note: Every The Function should handle rate limiting.

***Non-Functional Requirements:***

- The resource [trello-openapi-compact.yaml](trello-openapi-compact.yaml) describes The API.

- The Functions being implemented *must not* invoke The Spawn Method nor The Worker Thread.

- Refer to the resource [trello-openapi-compact.yaml](trello-openapi-compact.yaml) on what The API returns when we hit rate limit.

***Functional Requirements:***

- Implement The Function "check_authentication" that provides a check if authentication with The API works. Authentication should be checked by making a request to the endpoint "/members/{id}", and providing "me" as the value of the "id" parameter.

  ***Acceptance Tests:***

  - {% include "templates/test_rate_limiting_during_data_extraction.plain", function_name: "check_authentication" %}

- Implement The Function "fetch_boards" that uses The API to fetch The List of Boards (The Fetched Boards) using the endpoint "/members/{id}/boards".

  ***Acceptance Tests:***

  - Test the function "fetch_boards". Expect to exist a board with the name "SaaS connectors" in the result of The Function.

  - {% include "templates/test_rate_limiting_during_data_extraction.plain", function_name: "fetch_boards" %}

- Implement The Function "fetch_organization_members" that uses The API to fetch The List of Users of The Organization (The Fetched Users) using the endpoint "/organizations/{id}/members". The Organization ID should be provided in `event["payload"]["connection_data"]["org_id"]`.

  ***Acceptance Tests:***

  - {% include "templates/test_rate_limiting_during_data_extraction.plain", function_name: "fetch_organization_members" %}

- Implement The Function "fetch_board_cards" that uses The API to fetch The Fetched Cards for a given board using the endpoint "/boards/{id}/cards".
  - The Board ID should be provided in `event["payload"]["event_context"]["external_sync_unit_id"]`
  - The following pagination parameters should be supported:
    - "limit" (required, integer)
    - "before" (optional, string)
  - "limit" and "before" should be provided in `event["input_data"]["global_values"]["limit"]` and `event["input_data"]["global_values"]["before"]`.
  - Endpoint "/boards/{id}/cards" should be called with query param `attachments` set to `true`.

  ***Acceptance Tests:***

  - Test The Function "fetch_board_cards" with Board ID "688725dad59c015ce052eecf", "limit" of 100, and no "before" parameter. Expect the number of The Fetched Cards to be 100.

  - Test The Function "fetch_board_cards" with Board ID "688725dad59c015ce052eecf", "limit" of 100, and "before" set to "688725fdf26b3c50430cae23". Expect the number of The Fetched Cards to be 50.

  - Test The Function "fetch_board_cards" with the following flow:
    - Step 1: Test The Function "fetch_board_cards" with Board ID "688725dad59c015ce052eecf", "limit" of 100, and "before" set to "688725dce452b309c904aac4" (:= apiResult)
    - Step 2: Out of `apiResult`, retrieve the card that has property "id" equal to "688725db990240b77167efef" (:= card)
    - Step 3: From array `card["attachments"]`, retrieve the attachment object that has property "name" equal to "devrev cover" (:= attachment)
    - Step 4: Expect `attachment["name"]` to be equal to "devrev cover".

  - {% include "templates/test_rate_limiting_during_data_extraction.plain", function_name: "fetch_board_cards" %}

- Implement The Function "download_attachment" that uses The API to download an attachment using the endpoint "/cards/{idCard}/attachments/{idAttachment}/download/{fileName}".
  - parameters "idCard", "idAttachment", and "fileName" should be provided in the `event["input_data"]["global_values"]["idCard"]`, `event["input_data"]["global_values"]["idAttachment"]`, and `event["input_data"]["global_values"]["fileName"]` respectively. All of "idCard", "idAttachment", and "fileName" should be required.
  - Note: Endpoint "/cards/{idCard}/attachments/{idAttachment}/download/{fileName}" should be called with OAuth 1.0a authorization (oauth_consumer_key and oauth_token encoded in the Authorization header).

  ***Acceptance Tests:***

  - Test The Function "download_attachment" with Card ID "688725db990240b77167efef", Attachment ID "68c2be83c413a1889bde83df", and fileName "temporary-file-name.png". Expect the call to The Function to succeed.

  - {% include "templates/test_rate_limiting_during_data_extraction.plain", function_name: "download_attachment" %}


## Generate 'initial_domain_mapping.json' and 'external_domain_metadata.json'

### Generate 'external_domain_metadata.json'

{% include "templates/external_domain_metadata_boilerplate.plain" %}

***Functional Requirements:***

- Implement The Function 'get_external_domain_metadata' that generates and returns The External Domain Metadata JSON object. The External Domain Metadata JSON object should have the record type 'users'.
  - {% include "mappings/external_domain_metadata_users.plain" %}

- The External Domain Metadata JSON object should include the record type 'cards', while preserving any existing record types.
  - {% include "mappings/external_domain_metadata_cards.plain" %}

### Generate 'initial_domain_mapping.json'

{% include "templates/initial_domain_mapping_boilerplate.plain" %}

***Functional Requirements:***

- Implement The Function that generates and returns The Initial Domain Mapping JSON object. The Initial Domain Mapping JSON object should have record_type_mappings "users".
  - {% include "mappings/initial_domain_mapping_users.plain" %}

- The Initial Domain Mapping JSON object should have record_type_mappings "cards", while preserving any existing mappings.
  - {% include "mappings/initial_domain_mapping_cards.plain" %}

## Pushing data to DevRev servers

***Definitions:***

- Resource [data-extraction.md](docs/data-extraction.md) should serve as a generic guide for the implementation of The Extraction Function.

- To list attachments alongside The Fetched Cards, you should use query parameter "attachments" set to "true".

- Refer to the resource [data-extraction-rules-for-emitting-events.md](docs/data-extraction-rules-for-emitting-events.md) for the rules for emitting events for The Extraction Function.

- TheExtractionStateObject is a state passed to The Worker Thread. The following structure for `TheExtractionStateObject` should be used:
  - "users":
    - "completed" (boolean, required, indicating if the users data has been pushed to the DevRev servers)
  - "cards":
    - "completed" (boolean, required, indicating if the cards data has been fully pushed to the DevRev servers)
    - "before" (string, optional, indicating the ID of the what's the next "before" parameter to use when fetching the next page of The Fetched Cards)
    - "modifiedSince" (string, optional, timestamp used for incremental data synchronization to fetch only the cards that have been updated since the last sync)
  - "attachments": 
    - "completed" (boolean, required, indicating if the attachments data has been pushed to the DevRev servers)

***Non-Functional Requirements:***

- The resource [trello-openapi-compact.yaml](trello-openapi-compact.yaml) describes The API. The Normalization Function should take the relevant record type from The External Domain Metadata JSON object and map all resources from The API to the corresponding record type in The Normalization Function.

{% include "templates/spawn_method_instructions.plain" %}

- The Trello Internal Client should be used to retrieve The Fetched Boards, The Fetched Users, The Fetched Cards and all other data from The API.

- The Fetched Users and The Fetched Cards *must not* be mocked and must be retrieved from The API.

- The Extraction Function should not stringify error messages. If an error is thrown, it should be logged before throwing it.

- When listing The Fetched Cards, you should always set the parameter "limit" to 100 (`ThePaginationLimit`) when calling The API.

- The Fetched Cards should be retrieved in full with pagination (with "limit" and "before" parameters). This includes making multiple requests to The API.
  - While True:
    - Fetch The Fetched Cards (`:= TheFetchedCardsResponse`). Pass the following query parameters to The API:
      - limit=`ThePaginationLimit`
      - If `TheExtractionStateObject["cards"]["before"]` exists and is not empty, propagate it as the "before" parameter to the API call.
    - If `len(TheFetchedCardsResponse) < ThePaginationLimit`:
      - Set `TheExtractionStateObject["cards"]["completed"]=true`
      - Break the loop.
    - Else:
      - Set `TheExtractionStateObject["cards"]["before"]=TheFetchedCardsResponse[0]["id"]`

- To retrieve "created_date" from The API and convert it in The Normalization Function, keep in mind that the first 8 characters represent a Unix timestamp in hexadecimal format. To retrieve the "created_date" from The API:
  - Take the first 8 characters of the ID
  - convert to decimal
  - convert to ISO 8601 Extended Format with timezone.

- Fields named "...lastActivity..." in The API have the role of "modified_since" in the DevRev objects.

***Functional Requirements:***

- If "event_type" equals "EXTRACTION_EXTERNAL_SYNC_UNITS_START", The Extraction Function should implement the "external sync units extraction" part of the extraction workflow as described in the resource [external-sync-units-extraction.mdx](docs/external-sync-units-extraction.mdx):
  - Retrieve The Fetched Boards
  - Push The Fetched Boards as external sync units using the following mapping from the fields in The Fetched Boards to the fields in The External Sync Units:
    - "id" from The Fetched Boards should be mapped to "id" in The External Sync Units
    - "name" from The Fetched Boards should be mapped to "name" in The External Sync Units
    - "desc" from The Fetched Boards should be mapped to "description" in The External Sync Units
    - "item_type" should have a fixed value of "cards"

  ***Acceptance Tests:***
  
  - Test The Extraction Function using the resource [trello_external_sync_unit_check.json](test_data/trello_external_sync_unit_check.json). 
    - Expect The Callback Server to receive *a single* event with "event_type" "EXTRACTION_EXTERNAL_SYNC_UNITS_DONE".

  - {% include "templates/test_rate_limiting_during_emitting_events.plain", input_event_name: "EXTRACTION_EXTERNAL_SYNC_UNITS_START", resource_name: "trello_external_sync_unit_check.json", expected_output_event_type: "EXTRACTION_EXTERNAL_SYNC_UNITS_ERROR" %}

- If "event_type" equals "EXTRACTION_METADATA_START" The Extraction Function should implement the "metadata extraction" part of the extraction workflow as described in the resource [metadata-extraction.md](docs/metadata-extraction.mdx). Please note that The External Domain Metadata JSON should not be normalized when pushed to the repository.

- If "event_type" equals "EXTRACTION_DATA_START" or "EXTRACTION_DATA_CONTINUE" The Extraction Function should push the 'users' data. To push the 'users' data, it should:
  - If `TheExtractionStateObject["users"]["completed"]=false`:
    - Fetch The Fetched Users
    - Push The Fetched Users to the repository designated for 'users' data.
    - Set `TheExtractionStateObject["users"]["completed"]=true`

  ***Acceptance Tests:***

  - {% include "templates/data_extraction_acceptance_test.plain", resource_name: "data_extraction_test.json", artifact_name: "users", expected_item_count: 9 %}

  - {% include "templates/test_rate_limiting_during_emitting_events.plain", input_event_name: "EXTRACTION_DATA_START", resource_name: "data_extraction_test.json", expected_output_event_type: "EXTRACTION_DATA_DELAY" %}

  - Validate The Normalization Function with the chef-cli tool (The Chef CLI) for the "users" record type:
    - Firstly, invoke The Extraction Function using the resource [data_extraction_test.json](test_data/data_extraction_test.json).
    - Secondly, {% include "templates/chef_cli_normalization_validation.plain", record_type: "users" %}

- If "event_type" equals "EXTRACTION_DATA_START" or "EXTRACTION_DATA_CONTINUE" The Extraction Function should push the 'cards' and 'users' data. To push the 'cards' data, it should:
  - If `TheExtractionStateObject["cards"]["completed"]=false`:
    - While Fetching The Fetched Cards using pagination (The Cards Iteration):
      - Push The Fetched Cards of the current page to the repository designated for 'cards' data (`:= cards_response`)
      - Update `TheExtractionStateObject["cards"]["before"]=cards_response[0]["id"]`
    - Set `TheExtractionStateObject["cards"]["completed"]=true`, `TheExtractionStateObject["cards"]["before"]=""`.

  ***Acceptance Tests:***

  - {% include "templates/data_extraction_acceptance_test.plain", resource_name: "data_extraction_test.json", artifact_name: "cards", expected_item_count: 150 %}

  - {% include "templates/data_extraction_acceptance_test.plain", resource_name: "data_extraction_continue_test.json", artifact_name: "cards", expected_item_count: 150 %}

  - {% include "templates/test_rate_limiting_during_emitting_events.plain", input_event_name: "EXTRACTION_DATA_START", resource_name: "data_extraction_test.json", expected_output_event_type: "EXTRACTION_DATA_DELAY" %}

  - Validate The Normalization Function with the chef-cli tool (The Chef CLI) for the "cards" record type:
    - Firstly, invoke The Extraction Function using the resource [data_extraction_test.json](test_data/data_extraction_test.json).
    - Secondly, {% include "templates/chef_cli_normalization_validation.plain", record_type: "cards" %}

- If "event_type" equals "EXTRACTION_DATA_START" or "EXTRACTION_DATA_CONTINUE" The Extraction Function should push the 'attachments', 'cards' and 'users' data. To push the 'attachments' data, it should:
  - If `TheExtractionStateObject["cards"]["completed"]=false`:
    - Inside every iteration of the Cards Iteration:
      - Extract The Fetched Attachments from The Fetched Cards.
      - Push The Fetched Attachments to the repository designated for 'attachments' data.
    - Set `TheExtractionStateObject["attachments"]["completed"]=true`
  - Note: Refer to the resource [attachment_normalization.md](docs/attachment_normalization.md) on attachment normalization.
  - Note: Here's how to normalize "url" field for 'attachments' data:
    - if field "url" from The Fetched Attachment object starts with "https://trello.com": construct the "url" field using the following format: f"https://api.trello.com/1/cards/{idCard}/attachments/{idAttachment}/download/{fileName}".
    - else: set the "url" field to the original "url" field.

  ***Acceptance Tests:***

  - {% include "templates/data_extraction_acceptance_test.plain", resource_name: "data_extraction_test.json", artifact_name: "attachments", expected_item_count: 2 %}

- If "event_type" equals "EXTRACTION_ATTACHMENTS_START" or "EXTRACTION_ATTACHMENTS_CONTINUE" The Extraction Function should implement attachment extraction as described in the resource [attachments-extraction.md](docs/attachments-extraction.md).
  - Note: Streaming the attachments *MUST* be authenticated using OAuth 1.0a authorization (oauth_consumer_key and oauth_token encoded in the Authorization header).

  ***Acceptance Tests:***

  - {% include "templates/attachment_extraction_acceptance_test.plain", data_extraction_resource_name: "data_extraction_test.json", attachment_extraction_resource_name: "attachments_extraction_test.json", expected_attachment_count: 2 %}

  - Test The Extraction Function using the resource [attachments_extraction_continue_test.json](test_data/attachments_extraction_continue_test.json). 
    - Expect The Callback Server to receive from DevRev a **single** event with "event_type" that equals "EXTRACTION_ATTACHMENTS_DONE".

  - {% include "templates/test_rate_limiting_during_emitting_events.plain", input_event_name: "EXTRACTION_ATTACHMENTS_START", resource_name: "attachments_extraction_test.json", expected_output_event_type: "EXTRACTION_ATTACHMENTS_DONE" %}

- If "event_type" equals "EXTRACTION_DATA_START", The Extraction Function should support incremental data synchronization as described in the resource [incremental_mode.md](docs/incremental_mode.md).
  - Incremental mode should only work for the "cards" and their corresponding "attachments" data. If `event["payload"]["event_context"]["mode"]=SyncMode.INCREMENTAL`, set:
    - `TheExtractionStateObject["cards"]["modifiedSince"]=adapter.state.lastSuccessfulSyncStarted` 
    - `TheExtractionStateObject["cards"]["completed"]=false`
    - `TheExtractionStateObject["attachments"]["completed"]=false`
  - Based on the field "dateLastActivity" (ISO 8601 Extended Format with timezone), you should client-side filter only the The Fetched Cards that have been updated after the time of the last successful sync.
  - Note: The API *does not* support filtering by "dateLastActivity" server-side.
  - Note: In incremental mode, you should push only the filtered cards and their corresponding attachments to the DevRev servers.

  ***Acceptance Tests:***

  - {% include "templates/trello_incremental_mode_acceptance_tests_first.plain" %}

  - {% include "templates/trello_incremental_mode_acceptance_tests_second.plain" %}