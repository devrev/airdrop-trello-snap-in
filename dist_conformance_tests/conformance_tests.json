{
    "1.1": {
        "functional_requirement": "- Implement The Function that only checks if The Function can be invoked.",
        "folder_name": "conformance_tests/function_invocation_tests"
    },
    "1.2": {
        "functional_requirement": "- Implement The Function called \"test_external_sync_units\" (The External Sync Units Test Function) that provides a test of the 'external sync units' part of the extraction workflow as described in the resource `[resource]external-sync-units-extraction.mdx`.\n  - If \"event_type\" equals \"EXTRACTION_EXTERNAL_SYNC_UNITS_START\", The External Sync Units Test Function should:\n    - Only emit event \"EXTRACTION_EXTERNAL_SYNC_UNITS_DONE\".",
        "folder_name": "conformance_tests/external_sync_units_tests",
        "acceptance_tests": [
            "- Test The Function using the resource `[resource]external_sync_unit_check.json`. Test is successful if The Callback Server receives from DevRev an event with \"event_type\" that equals \"EXTRACTION_EXTERNAL_SYNC_UNITS_DONE\". The test must not send the event directly to The Callback Server."
        ]
    },
    "1.3": {
        "functional_requirement": "- Implement The Function called \"data_extraction_check\" (The Data Extraction Check Function) that provides a test of the 'data extraction' part of the extraction workflow as described in the resource `[resource]data-extraction.md`. The Data Extraction Check Function should:\n  - if \"event_type\" equals \"EXTRACTION_DATA_START\" or \"EXTRACTION_DATA_CONTINUE\", The Data Extraction Check Function should:\n    - Initialize a single repo \"users\"\n    - normalize the users data using The Normalization Function\n    - push the normalized users data to The DevRev Servers\n    - Emit event \"EXTRACTION_DATA_DONE\".\n    - Note: The Data Extraction Check Function should be simplified and should disregard all other details.",
        "folder_name": "conformance_tests/data_extraction_check_tests",
        "acceptance_tests": [
            "- Test The Function using the resource `[resource]data_extraction_check.json`. Test is successful if The Callback Server receives from DevRev an event with \"event_type\" that equals \"EXTRACTION_DATA_DONE\". The test must not send the event directly to The Callback Server."
        ]
    },
    "2.1.1": {
        "functional_requirement": "- Implement The Function \"check_authentication\" that provides a check if authentication with The API works. Authentication should be checked by making a request to the endpoint \"/members/{id}\", and providing \"me\" as the value of the \"id\" parameter.",
        "folder_name": "conformance_tests/authentication_check_tests",
        "acceptance_tests": [
            "- Test the rate limiting of The Function \"check_authentication\" with the following flow:\n  - Make a POST request to \"http://localhost:8004/start_rate_limiting\" with body `{ \"test_name\": <identifyer of the test>}`.\n  - Invoke The Function \"check_authentication\" with valid credentials and all required parameters.\n  - Expect: `status_code = 429`.\n  - Expect: `api_delay > 0` and `api_delay <= 3`. If api_delay is bigger than 3, assume the problem is that we did not calculate the api_delay correctly in The Implementation Code.\n  - Make a POST request to \"http://localhost:8004/end_rate_limiting\"."
        ]
    },
    "2.1.2": {
        "functional_requirement": "- Implement The Function \"fetch_boards\" that uses The API to fetch The List of Boards (The Fetched Boards) using the endpoint \"/members/{id}/boards\", and providing \"me\" as the value of the \"id\" parameter.",
        "folder_name": "conformance_tests/api_endpoint_integration_tests",
        "acceptance_tests": [
            "- Test the function \"fetch_boards\". Expect to exist a board with the name \"SaaS connectors\" in the result of The Function.",
            "- Test the rate limiting of The Function \"fetch_boards\" with the following flow:\n  - Make a POST request to \"http://localhost:8004/start_rate_limiting\" with body `{ \"test_name\": <identifyer of the test>}`.\n  - Invoke The Function \"fetch_boards\" with valid credentials and all required parameters.\n  - Expect: `status_code = 429`.\n  - Expect: `api_delay > 0` and `api_delay <= 3`. If api_delay is bigger than 3, assume the problem is that we did not calculate the api_delay correctly in The Implementation Code.\n  - Make a POST request to \"http://localhost:8004/end_rate_limiting\"."
        ]
    },
    "2.1.3": {
        "functional_requirement": "- Implement The Function \"fetch_organization_members\" that uses The API to fetch The List of Users of The Organization (The Fetched Users) using the endpoint \"/organizations/{id}/members\".\n  - The Organization ID should be provided in `event[\"payload\"][\"connection_data\"][\"org_id\"]`.",
        "folder_name": "conformance_tests/organization_members_fetch_tests",
        "acceptance_tests": [
            "- Test the rate limiting of The Function \"fetch_organization_members\" with the following flow:\n  - Make a POST request to \"http://localhost:8004/start_rate_limiting\" with body `{ \"test_name\": <identifyer of the test>}`.\n  - Invoke The Function \"fetch_organization_members\" with valid credentials and all required parameters.\n  - Expect: `status_code = 429`.\n  - Expect: `api_delay > 0` and `api_delay <= 3`. If api_delay is bigger than 3, assume the problem is that we did not calculate the api_delay correctly in The Implementation Code.\n  - Make a POST request to \"http://localhost:8004/end_rate_limiting\"."
        ]
    },
    "2.1.4": {
        "functional_requirement": "- Implement The Function \"fetch_board_cards\" that uses The API to fetch The Fetched Cards for a given board using the endpoint \"/boards/{id}/cards\".\n  - The Board ID should be provided in `event[\"payload\"][\"event_context\"][\"external_sync_unit_id\"]`\n  - The following pagination parameters should be supported:\n    - \"limit\" (required, integer)\n    - \"before\" (optional, string)\n  - \"limit\" and \"before\" should be provided in `event[\"input_data\"][\"global_values\"][\"limit\"]` and `event[\"input_data\"][\"global_values\"][\"before\"]`.\n  - Endpoint \"/boards/{id}/cards\" should be called with query param `attachments` set to `true`.",
        "folder_name": "conformance_tests/board_cards_fetch_tests",
        "acceptance_tests": [
            "- Test The Function \"fetch_board_cards\" with Board ID \"68e8befbf2f641caa9b1e275\", \"limit\" of 10, and no \"before\" parameter. Expect the number of The Fetched Cards to be 10.",
            "- Test The Function \"fetch_board_cards\" with Board ID \"68e8befbf2f641caa9b1e275\", \"limit\" of 10, and \"before\" set to \"68e8befe476ee045f3879d92\". Expect the number of The Fetched Cards to be 2.",
            "- Test The Function \"fetch_board_cards\" with the following flow:\n  - Step 1: Test The Function \"fetch_board_cards\" with Board ID \"68e8befbf2f641caa9b1e275\", \"limit\" of 10, and \"before\" set to \"68e8befe476ee045f3879d92\" (`:= apiResult`)\n  - Step 2: Out of `apiResult`, retrieve the card that has property \"id\" equal to \"68e8befc8381b0efa25ce1eb\" (`:= card`)\n  - Step 3: From array `card[\"attachments\"]`, retrieve the attachment object that has property \"name\" equal to \"devrev cover\" (`:= attachment`). Expect such `attachment` to exist.",
            "- Test the rate limiting of The Function \"fetch_board_cards\" with the following flow:\n  - Make a POST request to \"http://localhost:8004/start_rate_limiting\" with body `{ \"test_name\": <identifyer of the test>}`.\n  - Invoke The Function \"fetch_board_cards\" with valid credentials and all required parameters.\n  - Expect: `status_code = 429`.\n  - Expect: `api_delay > 0` and `api_delay <= 3`. If api_delay is bigger than 3, assume the problem is that we did not calculate the api_delay correctly in The Implementation Code.\n  - Make a POST request to \"http://localhost:8004/end_rate_limiting\"."
        ]
    },
    "2.1.5": {
        "functional_requirement": "- Implement The Function \"download_attachment\" that uses The API to download an attachment using the endpoint \"/cards/{idCard}/attachments/{idAttachment}/download/{fileName}\".\n  - parameters \"idCard\", \"idAttachment\", and \"fileName\" should be provided in the `event[\"input_data\"][\"global_values\"][\"idCard\"]`, `event[\"input_data\"][\"global_values\"][\"idAttachment\"]`, and `event[\"input_data\"][\"global_values\"][\"fileName\"]` respectively. All of \"idCard\", \"idAttachment\", and \"fileName\" should be required.\n  - Note: Endpoint \"/cards/{idCard}/attachments/{idAttachment}/download/{fileName}\" should be called with OAuth 1.0a authorization (oauth_consumer_key and oauth_token encoded in the Authorization header).",
        "folder_name": "conformance_tests/card_attachment_download_tests",
        "acceptance_tests": [
            "- Test The Function \"download_attachment\" with Card ID \"68e8befc8381b0efa25ce1eb\", Attachment ID \"68e8bff4ca7f017ba0524c05\", and fileName \"temporary-file-name.png\". Expect the call to The Function to succeed.",
            "- Test the rate limiting of The Function \"download_attachment\" with the following flow:\n  - Make a POST request to \"http://localhost:8004/start_rate_limiting\" with body `{ \"test_name\": <identifyer of the test>}`.\n  - Invoke The Function \"download_attachment\" with valid credentials and all required parameters.\n  - Expect: `status_code = 429`.\n  - Expect: `api_delay > 0` and `api_delay <= 3`. If api_delay is bigger than 3, assume the problem is that we did not calculate the api_delay correctly in The Implementation Code.\n  - Make a POST request to \"http://localhost:8004/end_rate_limiting\"."
        ]
    },
    "2.1.6": {
        "functional_requirement": "- Implement The Function \"fetch_created_by\", which should return the ID of the user that created the card using the endpoint \"/cards/{id}/actions\".\n  - \"id\" (required) here refers to the card ID. \"id\" should be provided in the `event[\"input_data\"][\"global_values\"][\"idCard\"]`.\n  - The endpoint should be called with query params \"filter\" set to \"createCard\" and \"fields\" set to \"idMemberCreator\".\n  - The ID of the user that created the card is in `response[0][\"idMemberCreator\"]`.",
        "folder_name": "conformance_tests/card_creator_fetch_tests",
        "acceptance_tests": [
            "- Test The Function \"fetch_created_by\" with Card ID \"68e8befc8381b0efa25ce1eb\". Expect the ID of the user that created the card to be \"6752eb529b14a3446b75e69c\".",
            "- Test the rate limiting of The Function \"fetch_created_by\" with the following flow:\n  - Make a POST request to \"http://localhost:8004/start_rate_limiting\" with body `{ \"test_name\": <identifyer of the test>}`.\n  - Invoke The Function \"fetch_created_by\" with valid credentials and all required parameters.\n  - Expect: `status_code = 429`.\n  - Expect: `api_delay > 0` and `api_delay <= 3`. If api_delay is bigger than 3, assume the problem is that we did not calculate the api_delay correctly in The Implementation Code.\n  - Make a POST request to \"http://localhost:8004/end_rate_limiting\"."
        ]
    },
    "2.2.1.1": {
        "functional_requirement": "- Implement The Function 'get_external_domain_metadata' that generates and returns The External Domain Metadata JSON object. The External Domain Metadata JSON object should have the record type 'users'.\n  - The record type 'users' (Name: Users) should have two fields:\n    - full_name (display name: \"Full Name\", is required, type: text)\n    - username (display name: \"Username\", is required, type: text)",
        "folder_name": "conformance_tests/external_domain_metadata_tests"
    },
    "2.2.1.2": {
        "functional_requirement": "- The External Domain Metadata JSON object should include the record type 'cards', while preserving any existing record types.\n  - The record type 'cards' (Name: Cards) should have the following fields:\n    - name (display name: \"Name\", is required, type: text)\n    - url (display name: \"URL\", is required, type: text)\n    - description (display name: \"Description\", is required, type: rich text)\n    - id_members (display name: \"ID Members\", is required, type: reference)\n      - Field id_members refers to the record type \"#record:users\".\n      - Type of field id_members is an array with max_length 50.\n    - created_by (display name: \"Created By\", is required, type: reference)\n      - Field created_by refers to the record type \"#record:users\".\n      - Type of field created_by is a single reference.",
        "folder_name": "conformance_tests/cards_record_type_schema_tests"
    },
    "2.2.2.1": {
        "functional_requirement": "- Implement The Function that generates and returns The Initial Domain Mapping JSON object. The Initial Domain Mapping JSON object should have record_type_mappings \"users\".\n  - The record_type_mappings \"users\" should have the following properties:\n    - Default mapping should map each external user to a \"devu\" user object.\n    - There should be a single \"possible_record_type_mappings\" element, specifying:\n      - The mapping is one-way (reverse is false, forward is true).\n      - There should be no custom fields in the mapping.\n    - The following The Stock Field Mapping Fields should be mapped using The External Transformation Method:\n      - field \"full_name\" should be mapped to \"full_name\".\n      - field \"username\" should be mapped to \"display_name\".",
        "folder_name": "conformance_tests/initial_domain_mapping_tests"
    },
    "2.2.2.2": {
        "functional_requirement": "- The Initial Domain Mapping JSON object should have record_type_mappings \"cards\", while preserving any existing mappings.\n  - The record_type_mappings \"cards\" should have the following properties:\n    - Default mapping should map each external card to a \"issue\" object.\n    - There should be a single \"possible_record_type_mappings\" element, specifying:\n      - The mapping is one-way (reverse is false, forward is true)\n      - There should be no custom fields in the mapping.\n    - The following The Stock Field Mapping Fields should be mapped using The External Transformation Method:\n      - field \"name\" should be mapped to \"title\"\n      - field \"url\" should be mapped to \"item_url_field\"\n      - field \"description\" should be mapped to \"body\" (rich text)\n      - field \"id_members\" should be mapped to \"owned_by_ids\" (use directly)\n      - field \"created_by\" should be mapped to \"created_by_id\" (use directly)\n    - The following The Stock Field Mapping Fields should be mapped using The Fixed Transformation Method:\n      - field \"priority\" should contain fixed value \"P2\"\n      - field \"stage\" should contain fixed value \"triage\"\n    - The following The Stock Field Mapping Fields should be mapped using The DevRev Record Transformation Method:\n      - field \"applies_to_part_id\" should refer to the \"product\" object type",
        "folder_name": "conformance_tests/cards_domain_mapping_tests"
    },
    "2.3.1": {
        "functional_requirement": "- If \"event_type\" equals \"EXTRACTION_EXTERNAL_SYNC_UNITS_START\", The Extraction Function should implement the \"external sync units extraction\" part of the extraction workflow as described in the resource `[resource]external-sync-units-extraction.mdx`:\n  - Retrieve The Fetched Boards\n  - Push The Fetched Boards as external sync units using the following mapping from the fields in The Fetched Boards to the fields in The External Sync Units:\n    - \"id\" should map to \"id\".\n    - \"name\" should map to \"name\".\n    - \"desc\" should map to \"description\".\n    - \"item_type\" should have a fixed value of \"cards\"",
        "folder_name": "conformance_tests/external_sync_units_extraction_tests",
        "acceptance_tests": [
            "- Test The Extraction Function using the resource `[resource]trello_external_sync_unit_check.json`.\n  - Expect The Callback Server to receive *a single* event with \"event_type\" \"EXTRACTION_EXTERNAL_SYNC_UNITS_DONE\".\n  - Let `external_sync_units_array = <event_from_callback_server>[\"event_data\"][\"external_sync_units\"]` (array of objects).\n    - Expect `external_sync_units_array` to exist and be an array.\n    - Expect `len(external_sync_units_array) = 4`.\n    - Out of `external_sync_units_array`, expect that there exists and element that has \"name\" equal to \"SaaS connectors\".",
            "- When the input event is \"EXTRACTION_EXTERNAL_SYNC_UNITS_START\", the Extraction Function must handle rate limiting using the following test flow:\n  - Step 1: Make a POST request to \"http://localhost:8004/start_rate_limiting\" with body `{ \"test_name\": <identifyer of the test>}`.\n  - Step 2: Invoke The Extraction Function using the resource `[resource]trello_external_sync_unit_check.json`.\n    - Expect The Callback Server to receive *a single* event with \"event_type\" \"EXTRACTION_EXTERNAL_SYNC_UNITS_ERROR\".\n  - Step 3: Make a POST request to \"http://localhost:8004/end_rate_limiting\"."
        ]
    },
    "2.3.2": {
        "functional_requirement": "- If \"event_type\" equals \"EXTRACTION_METADATA_START\" The Extraction Function should implement the \"metadata extraction\" part of the extraction workflow as described in the resource `[resource]metadata-extraction.md`.\n  - Note that The External Domain Metadata JSON should not be normalized when pushed to the repository.",
        "folder_name": "conformance_tests/extraction_metadata_start_tests"
    },
    "2.3.3": {
        "functional_requirement": "- If \"event_type\" equals \"EXTRACTION_DATA_START\" or \"EXTRACTION_DATA_CONTINUE\" The Extraction Function should push the 'users' data. To push the 'users' data, it should:\n  - If `TheExtractionStateObject[\"users\"][\"completed\"]=false`:\n    - Fetch The Fetched Users\n    - Push The Fetched Users to the repository designated for 'users' data.\n    - Set `TheExtractionStateObject[\"users\"][\"completed\"]=true`",
        "folder_name": "conformance_tests/users_data_extraction_tests",
        "acceptance_tests": [
            "- Test The Extraction Function using the resource `[resource]data_extraction_test.json`.\n  - Expect The Callback Server to receive from DevRev a **single** event with \"event_type\" that equals \"EXTRACTION_DATA_DONE\".\n  - Let `artifact_array = <event_from_callback_server>[\"event_data\"][\"artifacts\"]` (array of objects).\n    - Expect `len(artifact_array) > 0`.\n    - Out of `artifact_array`, expect one of the elements to have \"item_type\" equal to \"users\" (`:= users_artifact`) and `users_artifact[\"item_count\"]=9`.\n    - Note: If `users_artifact[\"item_count\"] < 9`, this indicates that not all the users data was extracted.",
            "- When the input event is \"EXTRACTION_DATA_START\", the Extraction Function must handle rate limiting using the following test flow:\n  - Step 1: Make a POST request to \"http://localhost:8004/start_rate_limiting\" with body `{ \"test_name\": <identifyer of the test>}`.\n  - Step 2: Invoke The Extraction Function using the resource `[resource]data_extraction_test.json`.\n    - Expect The Callback Server to receive *a single* event with \"event_type\" \"EXTRACTION_DATA_DELAY\".\n  - Step 3: Make a POST request to \"http://localhost:8004/end_rate_limiting\".",
            "- Validate The Normalization Function with the chef-cli tool (The Chef CLI) for the \"users\" record type:\n  - Firstly, invoke The Extraction Function using the resource `[resource]data_extraction_test.json`.\n  - Secondly, validate The Normalization Function with the chef-cli tool (The Chef CLI) using the command \"chef-cli validate-data -m <The External Domain Metadata JSON object file> -r users\":\n    - To invoke the function that returns The External Domain Metadata JSON object, send the event `[resource]external_domain_metadata_event_payload.json` to The Snap-In server.\n    - The External Domain Metadata JSON object should then be stored in temporary file and provided as path to the validation of The Normalization Function.\n    - The Chef CLI reads the extracted file (The Extracted File) from stdin.\n    - The Extracted File is inside folder provided in the environment variable \"EXTRACTED_FILES_FOLDER_PATH\". To retrieve the relevant file name, command `ls EXTRACTED_FILES_FOLDER_PATH | grep extractor_users | sort -r | head -n 1` should be executed. The test should always fail if The Extracted File is not present.\n    - Please note that the expected behaviour is that only after the invocation of The Extraction Function, the folder provided in the environment variable \"EXTRACTED_FILES_FOLDER_PATH\" should exist. The test should always fail if before the execution of The Chef CLI, the folder \"EXTRACTED_FILES_FOLDER_PATH\" does not exist or if The Extracted File is not found.\n    - The path to The Chef CLI executable is provided in the environment variable `CHEF_CLI_PATH`.\n    - For the validation of The Normalization Function to be successful The Chef CLI must return an empty output. The implementation of The Extraction Function directly infuences the output of The Chef CLI.\n    - The stdout and stderr of The Chef CLI *must* be printed to the console.\n    - The test should always fail if The Chef CLI is not available."
        ]
    },
    "2.3.4": {
        "functional_requirement": "- If \"event_type\" equals \"EXTRACTION_DATA_START\" or \"EXTRACTION_DATA_CONTINUE\" The Extraction Function should push the 'cards' and 'users' data. To push the 'cards' data, it should:\n  - If `TheExtractionStateObject[\"cards\"][\"completed\"]=false`:\n    - Fetch The Fetched Cards using pagination (The Cards Iteration). For every page:\n      - Push the Fetched Cards to repository designated for 'cards' data.\n      - Update the \"before\" parameter for \"cards\".\n    - Mark the \"cards\" data as completed.\n  - Trello Specific: Here's how you should fetch the \"created by\" information - for each card:\n    - Take the ID of the card, and call endpoint \"/cards/{id}/actions\" (`:= actions_response`) with query params \"filter\" set to \"createCard\" and \"fields\" set to \"idMemberCreator\".\n    - The ID of the user that created the card is in `actions_response[0][\"idMemberCreator\"]` (empty string if `len(actions_response)=0`).",
        "folder_name": "conformance_tests/cards_extraction_workflow_tests",
        "acceptance_tests": [
            "- Test The Extraction Function using the resource `[resource]data_extraction_test.json`.\n  - Expect The Callback Server to receive from DevRev a **single** event with \"event_type\" that equals \"EXTRACTION_DATA_DONE\".\n  - Let `artifact_array = <event_from_callback_server>[\"event_data\"][\"artifacts\"]` (array of objects).\n    - Expect `len(artifact_array) > 0`.\n    - Out of `artifact_array`, expect one of the elements to have \"item_type\" equal to \"cards\" (`:= cards_artifact`) and `cards_artifact[\"item_count\"]=12`.\n    - Note: If `cards_artifact[\"item_count\"] < 12`, this indicates that not all the cards data was extracted.",
            "- Test The Extraction Function using the resource `[resource]data_extraction_continue_test.json`.\n  - Expect The Callback Server to receive from DevRev a **single** event with \"event_type\" that equals \"EXTRACTION_DATA_DONE\".\n  - Let `artifact_array = <event_from_callback_server>[\"event_data\"][\"artifacts\"]` (array of objects).\n    - Expect `len(artifact_array) > 0`.\n    - Out of `artifact_array`, expect one of the elements to have \"item_type\" equal to \"cards\" (`:= cards_artifact`) and `cards_artifact[\"item_count\"]=12`.\n    - Note: If `cards_artifact[\"item_count\"] < 12`, this indicates that not all the cards data was extracted.",
            "- When the input event is \"EXTRACTION_DATA_START\", the Extraction Function must handle rate limiting using the following test flow:\n  - Step 1: Make a POST request to \"http://localhost:8004/start_rate_limiting\" with body `{ \"test_name\": <identifyer of the test>}`.\n  - Step 2: Invoke The Extraction Function using the resource `[resource]data_extraction_test.json`.\n    - Expect The Callback Server to receive *a single* event with \"event_type\" \"EXTRACTION_DATA_DELAY\".\n  - Step 3: Make a POST request to \"http://localhost:8004/end_rate_limiting\".",
            "- Validate The Normalization Function with the chef-cli tool (The Chef CLI) for the \"cards\" record type:\n  - Firstly, invoke The Extraction Function using the resource `[resource]data_extraction_test.json`.\n  - Secondly, validate The Normalization Function with the chef-cli tool (The Chef CLI) using the command \"chef-cli validate-data -m <The External Domain Metadata JSON object file> -r cards\":\n    - To invoke the function that returns The External Domain Metadata JSON object, send the event `[resource]external_domain_metadata_event_payload.json` to The Snap-In server.\n    - The External Domain Metadata JSON object should then be stored in temporary file and provided as path to the validation of The Normalization Function.\n    - The Chef CLI reads the extracted file (The Extracted File) from stdin.\n    - The Extracted File is inside folder provided in the environment variable \"EXTRACTED_FILES_FOLDER_PATH\". To retrieve the relevant file name, command `ls EXTRACTED_FILES_FOLDER_PATH | grep extractor_cards | sort -r | head -n 1` should be executed. The test should always fail if The Extracted File is not present.\n    - Please note that the expected behaviour is that only after the invocation of The Extraction Function, the folder provided in the environment variable \"EXTRACTED_FILES_FOLDER_PATH\" should exist. The test should always fail if before the execution of The Chef CLI, the folder \"EXTRACTED_FILES_FOLDER_PATH\" does not exist or if The Extracted File is not found.\n    - The path to The Chef CLI executable is provided in the environment variable `CHEF_CLI_PATH`.\n    - For the validation of The Normalization Function to be successful The Chef CLI must return an empty output. The implementation of The Extraction Function directly infuences the output of The Chef CLI.\n    - The stdout and stderr of The Chef CLI *must* be printed to the console.\n    - The test should always fail if The Chef CLI is not available."
        ]
    },
    "2.3.5": {
        "functional_requirement": "- If \"event_type\" equals \"EXTRACTION_DATA_START\" or \"EXTRACTION_DATA_CONTINUE\" The Extraction Function should push the 'attachments', 'cards' and 'users' data. To push the 'attachments' data, it should:\n  - If `TheExtractionStateObject[\"cards\"][\"completed\"]=false`:\n    - Inside The Cards Iteration - for every page:\n      - Extract The Fetched Attachments from The Fetched Cards\n      - Push The Fetched Attachments to repository designated for 'attachments' data.\n    - Mark the \"attachments\" data as completed.\n  - Note: Refer to the resource `[resource]attachment_normalization.md` on attachment normalization.\n  - Trello Specific: Here's how to normalize \"url\" field for 'attachments' data:\n    - if field \"url\" from The Fetched Attachment object starts with \"https://trello.com\": construct the \"url\" field using the following format: f\"https://api.trello.com/1/cards/{idCard}/attachments/{idAttachment}/download/{fileName}\".\n    - else: set the \"url\" field to the original \"url\" field.",
        "folder_name": "conformance_tests/attachments_extraction_workflow_tests",
        "acceptance_tests": [
            "- Test The Extraction Function using the resource `[resource]data_extraction_test.json`.\n  - Expect The Callback Server to receive from DevRev a **single** event with \"event_type\" that equals \"EXTRACTION_DATA_DONE\".\n  - Let `artifact_array = <event_from_callback_server>[\"event_data\"][\"artifacts\"]` (array of objects).\n    - Expect `len(artifact_array) > 0`.\n    - Out of `artifact_array`, expect one of the elements to have \"item_type\" equal to \"attachments\" (`:= attachments_artifact`) and `attachments_artifact[\"item_count\"]=2`.\n    - Note: If `attachments_artifact[\"item_count\"] < 2`, this indicates that not all the attachments data was extracted."
        ]
    },
    "2.3.6": {
        "functional_requirement": "- If \"event_type\" equals \"EXTRACTION_ATTACHMENTS_START\" or \"EXTRACTION_ATTACHMENTS_CONTINUE\" The Extraction Function should implement attachment extraction as described in the resource `[resource]attachments-extraction.md`.\n  - Trello Specific: Streaming the attachments *MUST* be authenticated using OAuth 1.0a authorization (oauth_consumer_key and oauth_token encoded in the Authorization header).",
        "folder_name": "conformance_tests/attachment_extraction_oauth_tests",
        "acceptance_tests": [
            "- Test The Extraction Function with the following flow (The Attachment Test Flow):\n  - Step 1: Invoke The Extraction Function using the resource `[resource]data_extraction_test.json`.\n    - Expect The Callback Server to receive from DevRev a **single** event with \"event_type\" that equals \"EXTRACTION_DATA_DONE\".\n  - Step 2: Invoke The Extraction Function using the resource `[resource]attachments_extraction_test.json`.\n    - Expect The Callback Server to receive from DevRev a **single** event (`:= event_from_callback_server`) with \"event_type\" that equals \"EXTRACTION_ATTACHMENTS_DONE\".\n    - Expect `event_from_callback_server[\"event_data\"][\"artifacts\"]` to be an array. Expect this array to not be empty. Expect this array to have length 1.\n    - Let `artifact_object = event_from_callback_server[\"event_data\"][\"artifacts\"][0]`.\n      - Expect `artifact_object[\"item_type\"] = \"ssor_attachment\"` and `artifact_object[\"item_count\"] = 2`.\n      - Make a GET request to \"http://localhost:8003/is_uploaded/{artifact_object['id']}\". Expect response code to be equal to 200.\n  - Note: The Attachment Test Flow should be executed within a single test.",
            "- Test The Extraction Function using the resource `[resource]attachments_extraction_continue_test.json`.\n  - Expect The Callback Server to receive from DevRev a **single** event with \"event_type\" that equals \"EXTRACTION_ATTACHMENTS_DONE\".",
            "- When the input event is \"EXTRACTION_ATTACHMENTS_START\", the Extraction Function must handle rate limiting using the following test flow:\n  - Step 1: Make a POST request to \"http://localhost:8004/start_rate_limiting\" with body `{ \"test_name\": <identifyer of the test>}`.\n  - Step 2: Invoke The Extraction Function using the resource `[resource]attachments_extraction_test.json`.\n    - Expect The Callback Server to receive *a single* event with \"event_type\" \"EXTRACTION_ATTACHMENTS_DONE\".\n  - Step 3: Make a POST request to \"http://localhost:8004/end_rate_limiting\"."
        ]
    }
}