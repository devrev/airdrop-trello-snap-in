{
    "1.1": {
        "functional_requirement": "- Implement The Function that only checks if The Function can be invoked.",
        "folder_name": "conformance_tests/function_invocation_check"
    },
    "1.2": {
        "functional_requirement": "- Implement The Function called \"test_external_sync_units\" that provides a test of the 'external sync units' part of the extraction workflow as described in the resource `[resource]external-sync-units-extraction.mdx`. Only check if the extraction can be triggered and that it successfully completes. Disregard all other details.",
        "folder_name": "conformance_tests/external_sync_units_test",
        "acceptance_tests": [
            "- Test The Function using the resource `[resource]external_sync_unit_check.json`. Test is successful if The Callback Server receives from DevRev an event with \"event_type\" that equals \"EXTRACTION_EXTERNAL_SYNC_UNITS_DONE\". The test must not send the event directly to The Callback Server."
        ]
    },
    "1.3": {
        "functional_requirement": "- Implement The Function called \"data_extraction_check\" (The Data Extraction Check Function) that provides a test of the 'data extraction' part of the extraction workflow as described in the resource `[resource]data-extraction.md`. The Data Extraction Check Function should:\n  - Initialize a single repo \"users\"\n  - normalize the users data using The Normalization Function\n  - push the normalized users data to The DevRev Servers\n  - Note: The Data Extraction Check Function should be simplified and should disregard all other details.",
        "folder_name": "conformance_tests/data_extraction_check",
        "acceptance_tests": [
            "- Test The Function using the resource `[resource]data_extraction_check.json`. Test is successful if The Callback Server receives from DevRev an event with \"event_type\" that equals \"EXTRACTION_DATA_DONE\". The test must not send the event directly to The Callback Server."
        ]
    },
    "2.1.1": {
        "functional_requirement": "- Implement The Function that provides a check if authentication with The API works. Authentication should be checked by making a request to the endpoint \"/members/{id}\", and providing \"me\" as the value of the \"id\" parameter.",
        "folder_name": "conformance_tests/api_authentication_check"
    },
    "2.1.2": {
        "functional_requirement": "- Implement The Function that uses The API to fetch The List of Boards (The Fetched Boards) using the endpoint \"/members/{id}/boards\".",
        "folder_name": "conformance_tests/member_boards_fetch",
        "acceptance_tests": [
            "- When using The Test Trello Credentials a board with the name \"SaaS connectors\" must be in the result of The Function."
        ]
    },
    "2.1.3": {
        "functional_requirement": "- Implement The Function that uses The API to fetch The List of Users of The Organization (The Fetched Users) using the endpoint \"/organizations/{id}/members\". The Organization ID is provided in the \"org_id\" field of the \"connection_data\" dictionary which is part of \"payload\" dictionary.",
        "folder_name": "conformance_tests/organization_members_fetch"
    },
    "2.1.4": {
        "functional_requirement": "- Implement The Function called \"fetch_board_cards\" that uses The API to fetch The Fetched Cards for a given board using the endpoint \"/boards/{id}/cards\".\n  - The Board ID is provided in the \"external_sync_unit_id\" field of the \"event_context\" dictionary which is part of \"payload\" dictionary.\n  - The following pagination parameters should be supported:\n    - \"limit\" (required, integer)\n    - \"before\" (optional, string)\n  - \"limit\" and \"before\" should be provided in the \"payload\" dictionary.",
        "folder_name": "conformance_tests/board_cards_fetch",
        "acceptance_tests": [
            "- Test The Function \"fetch_board_cards\" with Board ID \"688725dad59c015ce052eecf\", \"limit\" of 100, and no \"before\" parameter. Expect the number of The Fetched Cards to be 100.",
            "- Test The Function \"fetch_board_cards\" with Board ID \"688725dad59c015ce052eecf\", \"limit\" of 100, and \"before\" set to \"688725fdf26b3c50430cae23\". Expect the number of The Fetched Cards to be 50."
        ]
    },
    "2.2.1.1": {
        "functional_requirement": "- Implement The Function 'get_external_domain_metadata' that generates and returns The External Domain Metadata JSON object. The External Domain Metadata JSON object should have the record type 'users'.\n  - The record type 'users' (Name: Users) should have two fields:\n    - full_name (Full Name, is required, text)\n    - username (Username, is required, text)",
        "folder_name": "conformance_tests/external_domain_metadata_generation"
    },
    "2.2.1.2": {
        "functional_requirement": "- The External Domain Metadata JSON object should include the record type 'cards', while preserving any existing record types.\n  - The record type 'cards' (Name: Cards) should have the following fields:\n    - name (Name, is required, text)\n    - url (URL, is required, text)\n    - description (Description, is required, rich text)\n    - id_members (ID Members, is required, type: reference. Field id_members refers to the record type \"#record:users\". Type of field id_members is an array with max_length 50)",
        "folder_name": "conformance_tests/external_domain_metadata_cards_update"
    },
    "2.2.2.1": {
        "functional_requirement": "- Implement The Function that generates and returns The Initial Domain Mapping JSON object. The Initial Domain Mapping JSON object should have record_type_mappings \"users\".\n  - The record_type_mappings \"users\" should be the following:\n    - Set the default mapping so that each external user is mapped to a \"devu\" user object.\n    - There should be a single \"possible_record_type_mappings\" element, specifying:\n      - The mapping is one-way, e.g. reverse is false, forward is true\n      - There should be no custom fields in the mapping.\n      - A new recipe blueprint shard should be created for the mapping, rather than using an existing one.\n    - The following The Stock Field Mapping Fields should be mapped using The External Transformation Method:\n      - field \"full_name\" should be mapped to \"full_name\"\n      - field \"username\" should be mapped to \"display_name\"",
        "folder_name": "conformance_tests/initial_domain_mapping_generation"
    },
    "2.2.2.2": {
        "functional_requirement": "- The Initial Domain Mapping JSON object should have record_type_mappings \"cards\", while preserving any existing mappings.\n  - The record_type_mappings \"cards\" should be the following:\n    - Set the default mapping so that each external card is mapped to a \"issue\" object.\n    - There should be a single \"possible_record_type_mappings\" element, specifying:\n      - The mapping is one-way, e.g. reverse is false, forward is true\n      - There should be no custom fields in the mapping.\n      - A new recipe blueprint shard should be created for the mapping, rather than using an existing one.\n    - The following The Stock Field Mapping Fields should be mapped using The External Transformation Method:\n      - field \"name\" should be mapped to \"title\"\n      - field \"url\" should be mapped to \"item_url_field\"\n      - field \"description\" should be mapped to \"body\" (rich text)\n      - field \"id_members\" should be mapped to \"owned_by_ids\" (use directly)\n    - The following The Stock Field Mapping Fields should be mapped using The Fixed Transformation Method:\n      - field \"priority\" should contain fixed value \"P2\"\n      - field \"stage\" should contain fixed value \"triage\"\n    - The following The Stock Field Mapping Fields should be mapped using The DevRev Record Transformation Method:\n      - field \"applies_to_part_id\" should refer to the \"product\" object type",
        "folder_name": "conformance_tests/initial_domain_mapping_cards_configuration"
    },
    "2.3.1": {
        "functional_requirement": "- Implement The Extraction Function that:\n  - Retrieves The Fetched Boards\n  - Pushes The Fetched Boards as external sync units if \"event_type\" equals \"EXTRACTION_EXTERNAL_SYNC_UNITS_START\"\n  - The following mapping from the fields in The Fetched Boards to the fields in The External Sync Units should be used:\n    - \"id\" from The Fetched Boards should be mapped to \"id\" in The External Sync Units\n    - \"name\" from The Fetched Boards should be mapped to \"name\" in The External Sync Units\n    - \"desc\" from The Fetched Boards should be mapped to \"description\" in The External Sync Units\n    - \"item_type\" should have a fixed value of \"tasks\"",
        "folder_name": "conformance_tests/board_extraction_to_sync_units",
        "acceptance_tests": [
            "- Test The Extraction Function using the resource `[resource]trello_external_sync_unit_check.json`. Make sure to replace placeholders in the resource with The Trello API Key, The Trello OAuth Token, and The Organization ID. For the test to be successful The Callback Server **must** receive from DevRev **exactly one** event with \"event_type\" that equals \"EXTRACTION_EXTERNAL_SYNC_UNITS_DONE\". The test must not send the event directly to The Callback Server."
        ]
    },
    "2.3.2": {
        "functional_requirement": "- If \"event_type\" equals \"EXTRACTION_EXTERNAL_SYNC_UNITS_START\" The Extraction Function should:\n  - For each board from The Fetched Boards, retrieve the number of The Fetched Cards.\n  - Set the value of The External Sync Unit Item Count of each board to the number of The Fetched Cards.",
        "folder_name": "conformance_tests/external_sync_units_count_update",
        "acceptance_tests": [
            "- Test The Extraction Function using the resource `[resource]external_sync_unit_counts.json`. Make sure to replace placeholders in the resource with The Trello API Key, The Trello OAuth Token, and The Organization ID. For the test to be successful, the callback server **must** receive from DevRev an event with \"event_type\" that equals \"EXTRACTION_EXTERNAL_SYNC_UNITS_DONE\". The event_data should contain an \"external_sync_units\" array where one of the external sync units has \"id\" equal to The Board ID of \"688725dad59c015ce052eecf\" and \"item_count\" equal to 150. The test must not send the event directly to The Callback Server."
        ]
    },
    "2.3.3": {
        "functional_requirement": "- If \"event_type\" equals \"EXTRACTION_METADATA_START\" The Extraction Function should implement the \"metadata extraction\" part of the extraction workflow by pushing The External Domain Metadata JSON object to the repository called 'external_domain_metadata'. Please note that The External Domain Metadata JSON object shouldn't be normalized when pushed to the repository.",
        "folder_name": "conformance_tests/external_domain_metadata_extraction"
    },
    "2.3.4": {
        "functional_requirement": "- If \"event_type\" equals \"EXTRACTION_DATA_START\" or \"event_type\" equals \"EXTRACTION_DATA_CONTINUE\" The Extraction Function should push the 'users' data. To push the 'users' data, it should:\n  - Retrieve The Fetched Users\n  - push The Fetched Users to the repository designated for 'users' data.\n  - Update The Extraction State Object to indicate that the users data has been pushed to the DevRev servers",
        "folder_name": "conformance_tests/users_data_extraction_push",
        "acceptance_tests": [
            "- Test The Extraction Function using the resource `[resource]data_extraction_test.json`. Make sure to replace placeholders in the resource with The Trello API Key, The Trello OAuth Token, and The Organization ID. Test is successful if The Callback Server receives from DevRev a **single** event with \"event_type\" that equals \"EXTRACTION_DATA_DONE\". The test must not send event directly to The Callback Server.",
            "- Validate The Normalization Function with the chef-cli tool (The Chef CLI) for the \"users\" record type:\n  - Firstly, invoke The Extraction Function using the resource `[resource]data_extraction_test.json`. Make sure to replace placeholders in the resource with The Trello API Key, The Trello OAuth Token, and The Organization ID.\n  - Then, validate The Normalization Function with the chef-cli tool (The Chef CLI) using the command \"chef-cli validate-data -m <The External Domain Metadata JSON object file> -r users\":\n    - To invoke the function that returns The External Domain Metadata JSON object, send the event `[resource]external_domain_metadata_event_payload.json` to The Snap-In server.\n    - The External Domain Metadata JSON object should then be stored in temporary file and provided as path to the validation of The Normalization Function.\n    - The Chef CLI reads the extracted file (The Extracted File) from stdin.\n    - The Extracted File is inside folder provided in the environment variable \"EXTRACTED_FILES_FOLDER_PATH\". To retrieve the relevant file name, command `ls EXTRACTED_FILES_FOLDER_PATH | grep extractor_users | sort -r | head -n 1` should be executed. The test should always fail if The Extracted File is not present.\n    - Please note that the expected behaviour is that only after the invocation of The Extraction Function, the folder provided in the environment variable \"EXTRACTED_FILES_FOLDER_PATH\" should exist. The test should always fail if before the execution of The Chef CLI, the folder \"EXTRACTED_FILES_FOLDER_PATH\" does not exist or if The Extracted File is not found.\n    - The path to The Chef CLI executable is provided in the environment variable `CHEF_CLI_PATH`.\n    - For the validation of The Normalization Function to be successful The Chef CLI must return an empty output. The implementation of The Extraction Function directly infuences the output of The Chef CLI.\n    - stdout and stderr of The Chef CLI be always printed to the console.\n    - The test should always fail if The Chef CLI is not available."
        ]
    },
    "2.3.5": {
        "functional_requirement": "- If \"event_type\" equals \"EXTRACTION_DATA_START\" or \"event_type\" equals \"EXTRACTION_DATA_CONTINUE\" The Extraction Function should push the 'cards' data, while preserving any existing pushes of the data. To push the 'cards' data, it should:\n  - Fetch The Fetched Cards using pagination. If there's a \"before\" parameter in The Extraction State Object, use it to resume pagination from that point. Otherwise, start from the first page.\n  - After every call to The API for fetching The Fetched Cards:\n    - Update \"before\" parameter in The Extraction State Object to the ID of the first card in the current page of The Fetched Cards\n    - Push The Fetched Cards from the current page to the repository designated for 'cards' data.\n  - Extraction of The Fetch Cards is successful only after all pages have been processed. After success, update The Extraction State Object to indicate that the cards data has been fully pushed to the DevRev servers.",
        "folder_name": "conformance_tests/cards_data_extraction_push",
        "acceptance_tests": [
            "- Test The Extraction Function using the resource `[resource]data_extraction_test.json`. Make sure to replace placeholders in the resource with The Trello API Key, The Trello OAuth Token, and The Organization ID. Test is successful if The Callback Server receives from DevRev a **single** event with \"event_type\" that equals \"EXTRACTION_DATA_DONE\". The test must not send event directly to The Callback Server.",
            "- Test The Extraction Function using the resource `[resource]data_extraction_continue_test.json`. Make sure to replace placeholders in the resource with The Trello API Key, The Trello OAuth Token, and The Organization ID. Test is successful if The Callback Server receives from DevRev a **single** event with \"event_type\" that equals \"EXTRACTION_DATA_DONE\". The test must not send event directly to The Callback Server. The event_data should contain an \"artifacts\" array where one of the artifacts has \"item_type\" equal to \"cards\" and \"item_count\" equal to 150.",
            "- Validate The Normalization Function with the chef-cli tool (The Chef CLI) for the \"cards\" record type:\n  - Firstly, invoke The Extraction Function using the resource `[resource]data_extraction_test.json`. Make sure to replace placeholders in the resource with The Trello API Key, The Trello OAuth Token, and The Organization ID.\n  - Then, validate The Normalization Function with the chef-cli tool (The Chef CLI) using the command \"chef-cli validate-data -m <The External Domain Metadata JSON object file> -r cards\":\n    - To invoke the function that returns The External Domain Metadata JSON object, send the event `[resource]external_domain_metadata_event_payload.json` to The Snap-In server.\n    - The External Domain Metadata JSON object should then be stored in temporary file and provided as path to the validation of The Normalization Function.\n    - The Chef CLI reads the extracted file (The Extracted File) from stdin.\n    - The Extracted File is inside folder provided in the environment variable \"EXTRACTED_FILES_FOLDER_PATH\". To retrieve the relevant file name, command `ls EXTRACTED_FILES_FOLDER_PATH | grep extractor_cards | sort -r | head -n 1` should be executed. The test should always fail if The Extracted File is not present.\n    - Please note that the expected behaviour is that only after the invocation of The Extraction Function, the folder provided in the environment variable \"EXTRACTED_FILES_FOLDER_PATH\" should exist. The test should always fail if before the execution of The Chef CLI, the folder \"EXTRACTED_FILES_FOLDER_PATH\" does not exist or if The Extracted File is not found.\n    - The path to The Chef CLI executable is provided in the environment variable `CHEF_CLI_PATH`.\n    - For the validation of The Normalization Function to be successful The Chef CLI must return an empty output. The implementation of The Extraction Function directly infuences the output of The Chef CLI.\n    - stdout and stderr of The Chef CLI be always printed to the console.\n    - The test should always fail if The Chef CLI is not available."
        ]
    },
    "2.3.6": {
        "functional_requirement": "- If \"event_type\" equals \"EXTRACTION_ATTACHMENTS_START\" or \"EXTRACTION_ATTACHMENTS_CONTINUE\" The Extraction Function should implement attachment extraction as described in the resource `[resource]attachments-extraction.md`.",
        "folder_name": "conformance_tests/attachments_extraction_process"
    },
    "2.3.7": {
        "functional_requirement": "- If \"event_type\" equals \"EXTRACTION_DATA_START\", The Extraction Function should support incremental data synchronization as described in the resource `[resource]incremental_mode.md`.\n  - Incremental mode should only work for the \"cards\" data.\n  - Only the cards that have been updated after (this is seen as the value of \"dateLastActivity\") the time of the last successful sync should be once again pushed to the DevRev servers.\n  - Note: In incremental mode, you should filter the cards and push only the filtered cards to the DevRev servers.",
        "folder_name": "conformance_tests/incremental_cards_sync",
        "acceptance_tests": [
            "- Validate the incremental mode with the following flow:\n  - Firstly, invoke The Extraction Function using the resource `[resource]data_extraction_test.json`. Make sure to replace placeholders in the resource with The Trello API Key, The Trello OAuth Token, and The Organization ID. Expect The Callback Server to receive from DevRev a **single** event with \"event_type\" that equals \"EXTRACTION_DATA_DONE\".\n  - Then, perform request directly to The API to update the card with id \"688725fd3e26ebcf364bff4a\". More specifically, you should update name of this card to \"Card50-{uuid}\" using request `curl --request PUT --url 'https://api.trello.com/1/cards/688725fd3e26ebcf364bff4a?key=<TRELLO_API_KEY>&token=<TRELLO_TOKEN>&name=\"Card50-<uuid>\"' --header 'Accept: application/json'` (replace <TRELLO_API_KEY>, <TRELLO_TOKEN> and <uuid> with the actual values).\n  - Then, invoke The Extraction Function using the same resource `[resource]data_extraction_test.json`, but with payload.event_context.mode set to \"INCREMENTAL\". Expect The Callback Server to receive from DevRev a **single** event with \"event_type\" that equals \"EXTRACTION_DATA_DONE\". The \"event_data\" should contain an array \"artifacts\" where one of the elements has \"item_type\" equal to \"cards\" and \"item_count\" equal to 1, indicating only one card has been synced."
        ]
    }
}